package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import org.firstinspires.ftc.robotcore.external.JavaUtil;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaBase;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaRoverRuckus;

@Autonomous(name = "VuforiaTest", group = "")
public class VuforiaTest3 extends LinearOpMode {

  private VuforiaRoverRuckus vuforiaRoverRuckus;

  VuforiaBase.TrackingResults vuforiaResults;

  /**
   * This function is executed when this Op Mode is selected from the Driver Station.
   */
  @Override
  public void runOpMode() {
    vuforiaRoverRuckus = new VuforiaRoverRuckus();

    // Use optimized Vuforia blocks.
    telemetry.addData("Status", "Initializing Vuforia... please wait.");
    telemetry.update();
    // Rotate phone -90 so back camera faces "forward" direction on robot.
    // Assume the phone is in the dead center of the robot
    // (no translation in X, Y, or Z directions). Since we
    // want to use the rear camera, we need to rotate the phone
    // -90 degrees about the Y axis to turn it so the rear
    // camera is facing forward (in a landscape orientation).
    vuforiaRoverRuckus.initialize("", VuforiaLocalizer.CameraDirection.BACK,
        true, true, VuforiaLocalizer.Parameters.CameraMonitorFeedback.AXES,
        0, 0, 0, 0, -90, 0, true);
    // Prompt user to push Start button.
    telemetry.addData("Status", "Vuforia initialized. Press start to continue...");
    telemetry.update();
    waitForStart();
    if (opModeIsActive()) {
      // Activate Vuforia
      vuforiaRoverRuckus.activate();
      // While op mode is running, loop continuously.
      while (opModeIsActive()) {
        // Are the targets visible?
        // (Note we only process first visible target).
        if (isTargetVisible("BluePerimeter")) {
          processTarget();
        } else if (isTargetVisible("RedPerimeter")) {
          processTarget();
        } else if (isTargetVisible("FrontPerimeter")) {
          processTarget();
        } else if (isTargetVisible("BackPerimeter")) {
          processTarget();
        } else {
          telemetry.addData("No Targets Detected", "Targets are not visible.");
        }
        // Send telemetry info to Driver Station.
        telemetry.update();
        // Wait a bit before repeating the cycle.
        sleep(50);
      }
      // Deactivate Vuforia
      vuforiaRoverRuckus.deactivate();
    }

    vuforiaRoverRuckus.close();
  }

  /**
   * Check to see if the target is visible.
   */
  private boolean isTargetVisible(String trackableName) {
    boolean isVisible;

    // Get vuforia results for target.
    vuforiaResults = vuforiaRoverRuckus.track(trackableName);
    // Is this target visible?
    if (vuforiaResults.isVisible) {
      isVisible = true;
    } else {
      isVisible = false;
    }
    return isVisible;
  }

  /**
   * This function displays location on the field and rotation about the Z
   * axis on the field. It uses results from the isTargetVisible function.
   */
  private void processTarget() {
    // Display the target name.
    telemetry.addData("Target Detected", vuforiaResults.name + " is visible.");
    telemetry.addData("X (in)", Double.parseDouble(JavaUtil.formatNumber(displayValue(vuforiaResults.x, "IN"), 2)));
    telemetry.addData("Y (in)", Double.parseDouble(JavaUtil.formatNumber(displayValue(vuforiaResults.y, "IN"), 2)));
    telemetry.addData("Z (in)", Double.parseDouble(JavaUtil.formatNumber(displayValue(vuforiaResults.z, "IN"), 2)));
    telemetry.addData("Rotation about Z (deg)", Double.parseDouble(JavaUtil.formatNumber(vuforiaResults.zAngle, 2)));
  }

  /**
   * By default, distances are returned in millimeters by Vuforia.
   * Convert to other distance units (CM, M, IN, and FT).
   */
  private double displayValue(float originalValue, String units) {
    double convertedValue;

    // Vuforia returns distances in mm.
    if (units.equals("CM")) {
      convertedValue = originalValue / 10;
    } else if (units.equals("M")) {
      convertedValue = originalValue / 1000;
    } else if (units.equals("IN")) {
      convertedValue = originalValue / 25.4;
    } else if (units.equals("FT")) {
      convertedValue = (originalValue / 25.4) / 12;
    } else {
      convertedValue = originalValue;
    }
    return convertedValue;
  }
}
